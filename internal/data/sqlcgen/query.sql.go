// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package sqlcgen

import (
	"context"
	"database/sql"
	"time"
)

const createProject = `-- name: CreateProject :execresult
INSERT INTO project (company, name, description, starts, ends)
VALUES (?, ?, ?, ?, ?)
`

type CreateProjectParams struct {
	Company     int32
	Name        string
	Description string
	Starts      time.Time
	Ends        time.Time
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createProject,
		arg.Company,
		arg.Name,
		arg.Description,
		arg.Starts,
		arg.Ends,
	)
}

const getProjects = `-- name: GetProjects :many
SELECT id, company, name, description, starts, ends
FROM project
ORDER BY starts
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Company,
			&i.Name,
			&i.Description,
			&i.Starts,
			&i.Ends,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
