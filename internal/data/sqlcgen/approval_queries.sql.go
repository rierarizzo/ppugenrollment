// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: approval_queries.sql

package sqlcgen

import (
	"context"
	"database/sql"
	"time"
)

const createEnrollmentGenerated = `-- name: CreateEnrollmentGenerated :execresult
INSERT INTO enrollment_generated (enrollment_application, approved_by)
VALUES (?, ?)
`

type CreateEnrollmentGeneratedParams struct {
	EnrollmentApplication int32
	ApprovedBy            int32
}

func (q *Queries) CreateEnrollmentGenerated(ctx context.Context, arg CreateEnrollmentGeneratedParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createEnrollmentGenerated, arg.EnrollmentApplication, arg.ApprovedBy)
}

const getEnrollmentGenerated = `-- name: GetEnrollmentGenerated :one
SELECT eg.id                     AS id,
       eg.enrollment_application AS application_id,
       eg.generated_at           AS generated_at,
       p.id                      AS project_id,
       p.description             AS project_description,
       ps.schedule               AS project_schedule,
       p.starts                  AS project_starts,
       p.ends                    AS project_ends,
       c.id                      AS company_id,
       c.name                    AS company_name,
       c.ruc                     AS company_ruc,
       su.id                     AS approver_id,
       su.id_card_number         AS approver_card_number,
       su.name                   AS approver_name,
       su.surname                AS approver_surname
FROM enrollment_generated eg
         INNER JOIN enrollment_application ea ON eg.enrollment_application = ea.id
         INNER JOIN project p ON ea.project = p.id
         INNER JOIN project_schedule ps ON ea.schedule = ps.id
         INNER JOIN company c ON p.company = c.id
         INNER JOIN user su ON eg.approved_by = su.id
WHERE eg.id = ?
LIMIT 1
`

type GetEnrollmentGeneratedRow struct {
	ID                 int32
	ApplicationID      int32
	GeneratedAt        time.Time
	ProjectID          int32
	ProjectDescription string
	ProjectSchedule    string
	ProjectStarts      time.Time
	ProjectEnds        time.Time
	CompanyID          int32
	CompanyName        string
	CompanyRuc         string
	ApproverID         int32
	ApproverCardNumber string
	ApproverName       string
	ApproverSurname    string
}

func (q *Queries) GetEnrollmentGenerated(ctx context.Context, id int32) (GetEnrollmentGeneratedRow, error) {
	row := q.db.QueryRowContext(ctx, getEnrollmentGenerated, id)
	var i GetEnrollmentGeneratedRow
	err := row.Scan(
		&i.ID,
		&i.ApplicationID,
		&i.GeneratedAt,
		&i.ProjectID,
		&i.ProjectDescription,
		&i.ProjectSchedule,
		&i.ProjectStarts,
		&i.ProjectEnds,
		&i.CompanyID,
		&i.CompanyName,
		&i.CompanyRuc,
		&i.ApproverID,
		&i.ApproverCardNumber,
		&i.ApproverName,
		&i.ApproverSurname,
	)
	return i, err
}

const updateEnrollmentApplication = `-- name: UpdateEnrollmentApplication :exec
UPDATE enrollment_application
SET status='A'
WHERE id = ?
`

func (q *Queries) UpdateEnrollmentApplication(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, updateEnrollmentApplication, id)
	return err
}
